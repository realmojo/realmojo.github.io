(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{440:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"함수-리터럴"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#함수-리터럴"}},[t._v("#")]),t._v(" 함수 리터럴")]),t._v(" "),s("p",[t._v("함수 객체는 함수 리터럴로 생성할 수 있습니다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// add라는 변수를 생성하고 두 수를 더하는 함수를 add 변수에 저장")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("함수 리터럴에는 4가지 부분이 있습니다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 함수의 기본원형")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"function-예약어"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-예약어"}},[t._v("#")]),t._v(" function 예약어")]),t._v(" "),s("p",[s("code",[t._v("function")]),t._v(" 키워드는 예약어 입니다.")]),t._v(" "),s("h3",{attrs:{id:"함수의-이름"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#함수의-이름"}},[t._v("#")]),t._v(" 함수의 이름")]),t._v(" "),s("p",[s("code",[t._v("sum")]),t._v(" 함수의 이름은 함수를 재귀적으로 호출할 때 사용이 되며 디버거나 개발 툴에서 함수를 구분할 때도 사용합니다. 위의 예제처럼 함수의 이름이 주어지지 않은 경우 익명함수라고 부릅니다.")]),t._v(" "),s("h3",{attrs:{id:"매개변수-집합"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#매개변수-집합"}},[t._v("#")]),t._v(" 매개변수 집합")]),t._v(" "),s("p",[s("code",[t._v("(a,b)")]),t._v(" 괄호로 둘러싸인 함수의 매개변수 집합입니다. 괄호 안에 아예 없거나 하나 이상의 매개변수를 쉼표로 분리해서 열거합니다. 이 매개변수들은 함수내에서 변수로 정의 합니다. 일반적인 변수들은 undefined로 초기화하는 것과는 달리 매개변수는 함수를 호출할 때 넘겨진 인수로 초기화됩니다.")]),t._v(" "),s("h3",{attrs:{id:"문장들의-집합"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#문장들의-집합"}},[t._v("#")]),t._v(" 문장들의 집합")]),t._v(" "),s("p",[s("code",[t._v("{ return a + b; }")]),t._v(" 중괄호로 둘러싸인 문장들의 집합입니다. 이러한 문장들은 함수의 몸체이며 함수를 호출했을 때 실행합니다.")])])}),[],!1,null,null,null);a.default=e.exports}}]);